// GENERATED by @edgedb/generate v0.1.1
// Run 'npx @edgedb/generate edgeql-js' to re-generate

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _has from "./has";
import type * as _std from "./std";
export type $PostλShape = $.typeutil.flatten<_has.$CreatedAtλShape & {
  "body": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "quote": $.LinkDesc<$Post, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "user": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "replied_to": $.LinkDesc<$Post, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "num_likes": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "quotes": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "replies": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "num_replies": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "is_own": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "likes": $.LinkDesc<$PostLike, $.Cardinality.Many, {}, false, true,  false, false>;
  "is_liked": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "repost": $.LinkDesc<$Post, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "reposts": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "is_reposted": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "num_reposts": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "unique": $.PropertyDesc<$.TupleType<[_std.$str, _std.$str, _std.$str, _std.$str, _std.$str]>, $.Cardinality.AtMostOne, false, false, false, false>;
  "parent": $.LinkDesc<$Post, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "ancestors": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "<parent[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<ancestors[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<quote[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<replied_to[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<quotes[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<replies[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<post[is PostLike]": $.LinkDesc<$PostLike, $.Cardinality.Many, {}, false, false,  false, false>;
  "<repost[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<reposts[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<ancestors": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<parent": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<post": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<quote": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<quotes": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<replied_to": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<replies": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<repost": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<reposts": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Post = $.ObjectType<"default::Post", $PostλShape, null, [
  ..._has.$CreatedAt['__exclusives__'],
]>;
const $Post = $.makeType<$Post>(_.spec, "0a2ef91c-f55e-11ed-bf21-f9fe6eb8031e", _.syntax.literal);

const Post: $.$expr_PathNode<$.TypeSet<$Post, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Post, $.Cardinality.Many), null);

export type $PostLikeλShape = $.typeutil.flatten<_has.$CreatedAtλShape & {
  "post": $.LinkDesc<$Post, $.Cardinality.One, {}, false, false,  false, false>;
  "user": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "<likes[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<likes[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<likes": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $PostLike = $.ObjectType<"default::PostLike", $PostLikeλShape, null, [
  ..._has.$CreatedAt['__exclusives__'],
  {user: {__element__: $User, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },post: {__element__: $Post, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $PostLike = $.makeType<$PostLike>(_.spec, "163fad28-f55e-11ed-b41c-efdac08eaefd", _.syntax.literal);

const PostLike: $.$expr_PathNode<$.TypeSet<$PostLike, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($PostLike, $.Cardinality.Many), null);

export type $UserλShape = $.typeutil.flatten<_has.$CreatedAtλShape & {
  "followers": $.LinkDesc<$User, $.Cardinality.Many, {}, false, true,  false, false>;
  "avatarUrl": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "bio": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "coverUrl": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "is_own": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "location": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "provider": $.PropertyDesc<$.NamedTupleType<{name: _std.$str, id: _std.$str}>, $.Cardinality.One, true, false, false, false>;
  "website": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "following": $.LinkDesc<$User, $.Cardinality.Many, {
    "@created_at": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne>;
  }, false, false, false, false>;
  "is_followed": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "num_followers": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "num_following": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "followers_you_know": $.LinkDesc<$User, $.Cardinality.Many, {}, false, true,  false, false>;
  "num_followers_you_know": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "username": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "likes": $.LinkDesc<$PostLike, $.Cardinality.Many, {}, false, true,  false, false>;
  "posts": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "num_posts": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "<followers[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<following[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<followers_you_know[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is PostLike]": $.LinkDesc<$PostLike, $.Cardinality.Many, {}, false, false,  false, false>;
  "<followers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<followers_you_know": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<following": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ..._has.$CreatedAt['__exclusives__'],
  {provider: {__element__: $.NamedTupleType<{name: _std.$str, id: _std.$str}>, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {username: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $User = $.makeType<$User>(_.spec, "0855eb00-f55e-11ed-9cb1-65e29656f24f", _.syntax.literal);

const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($User, $.Cardinality.Many), null);

const $default__globals: {  current_user_id: _.syntax.$expr_Global<
              // "default::current_user_id",
              _std.$uuid,
              $.Cardinality.AtMostOne
              >} = {  current_user_id: _.syntax.makeGlobal(
              "default::current_user_id",
              $.makeType(_.spec, "00000000-0000-0000-0000-000000000100", _.syntax.literal),
              $.Cardinality.AtMostOne) as any};



export { $Post, Post, $PostLike, PostLike, $User, User };

type __defaultExports = {
  "Post": typeof Post;
  "PostLike": typeof PostLike;
  "User": typeof User;
  "global": typeof $default__globals
};
const __defaultExports: __defaultExports = {
  "Post": Post,
  "PostLike": PostLike,
  "User": User,
  "global": $default__globals
};
export default __defaultExports;
